TP : 

Exercice 1 : OK
	Ecrire une fonction qui calcul det(A) en développement par rapport à un eligne ou une colonne
Exercice 2 : 
	Ecrire une fonction qui calcul det(A) vaec les règles de combinaisons liénaires
	Faire apparaitre (n-1) zéros sur une ligne ou une colonne pour une matrice de taille n
Exercice 3 : OK
	Calculer A^m
	Comparer det(A^m) et det(A)^m
Exercice 4 : 
	Ecrire une fonction permettant de calculer le déterminant de VanderMonde d'ordre n >= 3
Exercice 5 : 
	Ecrire une fonction permettant de :
		- Dire si A est inversible ou non
		- Déterminer A^-1 (si A inversible)
Exercice 6 : OK
	Ecrire une fonction permettant de :
		- Dire si un système linéaire est de Cramer ou non
		- Donner sa solution unique (si la réponse est oui)	




//	public double test(double[][] matriceSi) {
//		if (matriceSi.length == 2) {
//			return (matriceSi[0][0] * matriceSi[1][1]) - (matriceSi[1][0] * matriceSi[0][1]);
//		} else {
//			double[][] matriceTempo = new double[matriceSi.length - 1][matriceSi.length - 1];
//			int l = 0, c = 0;
//			double det = 0;
//
//			// System.out.println();
//			for (int p = 0; p < matriceSi.length; p++) {
//				l = 0;
//				c = 0;
//				for (int i = 1; i < matriceSi.length; i++) {
//					c = 0;
//					for (int j = 0; j < matriceSi[0].length; j++) {
//
//						if (i != 0 && p != j) {
//							matriceTempo[l][c] = matriceSi[i][j];
//							c++;
//						}
//					}
//					l++;
//				}
//				afficherMatrice(matriceTempo, 3);
//
//				if (matriceTempo.length == 2) {
//					if ((((p + 1) + 1) % 2) == 0) {
//						det += matriceSi[0][p]
//								* ((matriceTempo[0][0] * matriceTempo[1][1]) - (matriceTempo[1][0] * matriceTempo[0][1]));
//						 System.out.println(" + Le Determinant est : " + (det) +
//						 "");
//					} else {
//						det -= matriceSi[0][p]
//								* ((matriceTempo[0][0] * matriceTempo[1][1]) - (matriceTempo[1][0] * matriceTempo[0][1]));
//						 System.out.println(" - Le Determinant est : " + (det) +
//						 "");
//					}
//				} else {
//					if ((((p + 1) + 1) % 2) == 0) {
//						det += test(matriceTempo) * matriceSi[0][p];
//					} else {
//						det -= test(matriceTempo) * matriceSi[0][p];
//					}
//				}
//			}
//			System.out.println("Determinant de la matrice finale : " + det + "\n");
//			return det;
//		}
//	}